// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/ARUMANDESU/todo-app/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskProvider is an autogenerated mock type for the TaskProvider type
type TaskProvider struct {
	mock.Mock
}

// GetAllTasks provides a mock function with given fields:
func (_m *TaskProvider) GetAllTasks() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: id
func (_m *TaskProvider) GetTaskByID(id int) (domain.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskProvider creates a new instance of TaskProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskProvider {
	mock := &TaskProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
