// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/ARUMANDESU/todo-app/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskModifier is an autogenerated mock type for the TaskModifier type
type TaskModifier struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *TaskModifier) CreateTask(task domain.Task) (domain.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Task) (domain.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(domain.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskModifier) DeleteTask(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTask provides a mock function with given fields: task
func (_m *TaskModifier) UpdateTask(task domain.Task) (domain.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Task) (domain.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(domain.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskModifier creates a new instance of TaskModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskModifier {
	mock := &TaskModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
